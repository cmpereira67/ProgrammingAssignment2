makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() x
setMatrix <- function(inverse) cache <<- inverse
getInverse <- function() cache
list(set = set, get = get,
setMatrix = setMatrix,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
cache <- x$getInverse()
if (!is.null(cache)) {
message("getting cached data")
return(cache)
}
matrix <- x$get()
tryCatch( {
cache <- solve(matrix, ...)
},
error = function(e) {
message("Error:")
message(e)
return(NA)
},
warning = function(e) {
message("Warning:")
message(e)
return(NA)
},
finally = {
# set inverted matrix in cache
x$setMatrix(cache)
} )
return (cache)
}
source("cachematrix.R")
a <- makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() x
setMatrix <- function(inverse) cache <<- inverse
getInverse <- function() cache
list(set = set, get = get,
setMatrix = setMatrix,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
cache <- x$getInverse()
if (!is.null(cache)) {
message("getting cached data")
return(cache)
}
matrix <- x$get()
tryCatch( {
cache <- solve(matrix, ...)
},
error = function(e) {
message("Error:")
message(e)
return(NA)
},
warning = function(e) {
message("Warning:")
message(e)
return(NA)
},
finally = {
# set inverted matrix in cache
x$setMatrix(cache)
} )
return (cache)
}
source("cachematrix.R")
a <- makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
cacheSolve(a)
> source("cachematrix.R")
> a <- makeCacheMatrix()
> a$set(matrix(1:4, 2, 2))
> cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix()
a$set(matrix(1:4, 2, 2))
cacheSolve(a)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() x
setMatrix <- function(inverse) cache <<- inverse
getInverse <- function() cache
list(set = set, get = get,
setMatrix = setMatrix,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
cache <- x$getInverse()
if (!is.null(cache)) {
message("getting cached data")
return(cache)
}
matrix <- x$get()
tryCatch( {
cache <- solve(matrix, ...)
},
error = function(e) {
message("Error:")
message(e)
return(NA)
},
warning = function(e) {
message("Warning:")
message(e)
return(NA)
},
finally = {
# set inverted matrix in cache
x$setMatrix(cache)
} )
return (cache)
}
## The following functions work together to create a square invertible matrix
## and make the inverse of the matrix available in the cache environment
## makeCacheMatrix creates and returns a list of functions
## used by cacheSolve to get or set the inverted matrix in cache
makeCacheMatrix <- function(x = matrix()) {
}
## cacheSolve calcluates the inverse of the matrix created in makeCacheMatrix
## If the inverted matrix does not exist in cache,
## itÂ´s created in the working environment and it's inverted value
## is stored in cache
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
##The code is
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() x
setMatrix <- function(inverse) cache <<- inverse
getInverse <- function() cache
list(set = set, get = get,
setMatrix = setMatrix,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
cache <- x$getInverse()
if (!is.null(cache)) {
message("getting cached data")
return(cache)
}
matrix <- x$get()
tryCatch( {
cache <- solve(matrix, ...)
},
error = function(e) {
message("Error:")
message(e)
return(NA)
},
warning = function(e) {
message("Warning:")
message(e)
return(NA)
},
finally = {
# set inverted matrix in cache
x$setMatrix(cache)
} )
return (cache)
}
makeCacheMatrix <- function(x = matrix()) {
cache <- NULL
set <- function(y) {
x <<- y
cache <<- NULL
}
get <- function() x
setMatrix <- function(inverse) cache <<- inverse
getInverse <- function() cache
list(set = set, get = get,
setMatrix = setMatrix,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
cache <- x$getInverse()
if (!is.null(cache)) {
message("getting cached data")
return(cache)
}
matrix <- x$get()
tryCatch( {
cache <- solve(matrix, ...)
},
error = function(e) {
message("Error:")
message(e)
return(NA)
},
warning = function(e) {
message("Warning:")
message(e)
return(NA)
},
finally = {
# set inverted matrix in cache
x$setMatrix(cache)
} )
return (cache)
}
